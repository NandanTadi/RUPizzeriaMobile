package com.project5.rupizzeriamobile;

import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.control.ListView;
import javafx.stage.Stage;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * StoreOrdersController class is essential to managing the store orders GUI
 * It displays all the orders with their respective details and order ids
 * @author Santosh Maryala,Nandan Tadi
 */
public class StoreOrdersController {
    @FXML
    protected Label totalordersLabel, totalcostLabel;
    @FXML
    private ListView outputField;
    private HashMap<Integer, Order> allOrders;
    private ArrayList<Integer> ids;
    private ArrayList<Order> orders;
    private DecimalFormat df = new DecimalFormat("#.##");
    private static StoreOrder storeOrder = new StoreOrder();

    /**
     * Method to display all the orders and details from a store view
     */
    public void initialize() {
        allOrders = storeOrder.storeOrders;
        ids = new ArrayList<>(allOrders.keySet());
        orders = new ArrayList<>(allOrders.values());
        for (int i = 0; i < orders.size(); i++) {
            int orderID = ids.get(i);
            Order orderDetails = orders.get(i);
            outputField.getItems().add(orderDetails.toString(orderID));
        }
        updatePricing();
    }
    /**
     * Function to bring user back to home screen when home is clicked
     * @throws IOException if unable to find fxml
     */
    @FXML
    protected void homeClicked() throws IOException {
        Parent root = FXMLLoader.load(getClass().
                getResource("MainView.fxml"));
        Stage window = (Stage) outputField.getScene().getWindow();
        window.setScene(new Scene(root, 600, 600));
    }
    /**
     * Function to cancel a selected order from the store end
     * @throws IOException if unable to find fxml
     */
    @FXML
    protected void cancelClicked() throws IOException {
        int selected = outputField.getSelectionModel().getSelectedIndex();
        if (selected >= 0) {
            int id = ids.get(selected);
            allOrders.remove(id);
            orders.remove(selected);
            ids.remove(selected);
            outputField.getItems().remove(selected);
            updatePricing();
        }
    }
    /**
     * Exports the current orders into a text file when the export
     * button is clicked
     * @throws IOException if unable to find fxml
     */
    @FXML
    protected void exportClicked() throws IOException {
        try {
            FileWriter writer = new FileWriter("exportedOrders.txt");
            for (int i = 0; i < orders.size(); i++) {
                int orderID = ids.get(i);
                Order orderDetails = orders.get(i);
                writer.write(orderDetails.toString(orderID) + "\n");
            }
            writer.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    /**
     * Updates the current pricing for all elements in orders so
     * that they are store properly for future tacking
     */
    private void updatePricing() {
        double subtotal = 0.00;
        for(Order i: orders) {
            subtotal += i.getPrice();
        }
        totalcostLabel.setText("$" + df.format(subtotal));
        totalordersLabel.setText("" + orders.size());
    }
    /**
     * Adds order to store order object in Store Order Controller
     * @param order reference to order needed to be added
     * @return true after successfully added
     */
    public boolean add(Order order) {
        outputField.getItems().clear();
        storeOrder.add(order);
        return true;
    }
}